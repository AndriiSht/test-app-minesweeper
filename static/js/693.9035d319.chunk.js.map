{"version":3,"file":"static/js/693.9035d319.chunk.js","mappings":"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","sources":["hooks/states/useBoardSizeState/useBoardSizeState.ts","hooks/states/atomKeys.ts","pages/Board/components/Cell/Cell.tsx","pages/Board/Board.tsx","utils/boardUtils/createBoard.ts","utils/boardUtils/reveal.ts","utils/boardUtils/types.ts"],"sourcesContent":["import { atom, useRecoilState } from 'recoil';\nimport { atomKeys } from '../atomKeys';\n\nexport const boardSIzeState = atom({\n  key: atomKeys.boardSize,\n  default: {\n    rows: 10,\n    cols: 10,\n    mines: 5,\n  },\n});\n\nexport const useBoardSizeState = () => useRecoilState(boardSIzeState);\n","export const atomKeys = {\n  boardSize: 'boardSize',\n};\n","import { CellDetails } from 'src/utils';\nimport styled from 'styled-components';\n\nconst CellNode = styled.div<{ revealed: CellDetails['revealed']; value: CellDetails['value'] }>`\n  width: 40px;\n  height: 40px;\n  background-color: ${({ revealed, value }) =>\n    revealed && value !== 0\n      ? value === 'X'\n        ? 'red'\n        : '#0254b1'\n      : revealed && value === 0\n      ? '#0254b1'\n      : '#000'};\n  opacity: 0.8;\n  border: 3px solid white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  cursor: pointer;\n  color: #f7cf06;\n  font-weight: bold;\n`;\n\ninterface CellProps {\n  details: CellDetails;\n  revealCell: (x: number, y: number) => void;\n}\n\nexport function Cell({ details, revealCell }: CellProps) {\n  const onCellClick = () => revealCell(details.x, details.y);\n\n  const value =\n    details.revealed && details.value !== 0 ? (details.value === 'X' ? 'ðŸ’£' : details.value) : '';\n\n  return (\n    <CellNode value={details.value} revealed={details.revealed} onClick={onCellClick}>\n      {value}\n    </CellNode>\n  );\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { CellDetails, createBoard, revealed } from 'src/utils';\nimport { Cell } from './components';\nimport styled from 'styled-components';\nimport { Button, Container, Heading } from 'src/components';\nimport { useBoardSizeState } from 'src/hooks';\nimport { useNavigate } from 'react-router-dom';\nimport { pageUrl } from 'src/const';\n\nconst ContainerStyled = styled(Container)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: fit-content;\n  color: #f7cf06;\n`;\n\nconst Aligned = styled.div`\n  display: flex;\n  margin: 40px auto;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonStyled = styled(Button)`\n  min-width: 200px;\n  margin-bottom: 30px;\n`;\n\nconst SubHeading = styled.span`\n  font-size: 16px;\n  font-weight: bold;\n  color: #f7cf06;\n`;\n\nfunction Board() {\n  const [board, setBoard] = useState<CellDetails[][]>([]);\n  const [explode, setExplode] = useState(false);\n  const [nonMineCount, setNonMineCount] = useState(0);\n  const [mineLocation, setMineLocation] = useState<[x: number, y: number][]>([]);\n  const [boardSize] = useBoardSizeState();\n\n  const restartBoard = useCallback(() => {\n    const newBoard = createBoard(boardSize.rows, boardSize.cols, boardSize.mines);\n    setNonMineCount(boardSize.rows * boardSize.cols - boardSize.mines);\n    setMineLocation(newBoard.mineLocation);\n    setBoard(newBoard.board);\n    setExplode(false);\n  }, [boardSize]);\n\n  useEffect(() => {\n    restartBoard();\n  }, [restartBoard]);\n\n  const navigate = useNavigate();\n\n  const revealCell = useCallback(\n    (x: number, y: number) => {\n      let newBoard = [...board];\n      if (newBoard[x][y].value === 'X' || nonMineCount === 0) {\n        for (let i = 0; i < mineLocation.length; i++) {\n          newBoard[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n        }\n        setBoard(newBoard);\n        setExplode(true);\n      }\n      let revealedBoard = revealed(newBoard, x, y, nonMineCount);\n      setBoard(revealedBoard.arr);\n      setNonMineCount(revealedBoard.newNonMines);\n    },\n    [board, mineLocation, nonMineCount],\n  );\n\n  const onSetupBoardClick = () => navigate(pageUrl.setupSession);\n\n  const onRestartClick = () => restartBoard();\n\n  const headingString = explode\n    ? 'Oooops... Too bad!'\n    : nonMineCount === 0\n    ? '!!! Victory !!!'\n    : 'MineSweeper';\n\n  return (\n    <ContainerStyled>\n      <Heading>{headingString}</Heading>\n      <SubHeading>Mines: {boardSize.mines}</SubHeading>\n      <Aligned>\n        <div>\n          {board.map((singleRow, index1) => {\n            return (\n              <Row key={index1}>\n                {singleRow.map((singleCol, index2) => {\n                  return <Cell details={singleCol} key={index2} revealCell={revealCell} />;\n                })}\n              </Row>\n            );\n          })}\n        </div>\n      </Aligned>\n      <ButtonStyled onClick={onRestartClick}>Restart</ButtonStyled>\n      <ButtonStyled onClick={onSetupBoardClick}>Setup the board size</ButtonStyled>\n    </ContainerStyled>\n  );\n}\n\nexport default Board;\n","import { CellDetails } from './types';\n\ntype MineLocation = [x: number, y: number][];\n\nfunction random(min = 0, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function createBoard(rows: number, columns: number, mines: number) {\n  let board: CellDetails[][] = [];\n\n  let mineLocation: MineLocation = [];\n\n  // Create empty board with all cells ------ >\n  for (let x = 0; x < rows; x++) {\n    let column: CellDetails[] = [];\n    for (let y = 0; y < columns; y++) {\n      column.push({\n        value: 0,\n        revealed: false,\n        x: x,\n        y: y,\n      });\n    }\n    board.push(column);\n  }\n  // Create empty board with all cells ------ >\n\n  // Randomize Bomb Placement ------>\n  let minesCount = 0;\n  while (minesCount < mines) {\n    let x = random(0, rows - 1);\n    let y = random(0, columns - 1);\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = 'X';\n      mineLocation.push([x, y]);\n      minesCount++;\n    }\n  }\n  // Randomize Bomb Placement ------>\n\n  // Set mine count for cell for all mines around ----->\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (board[i][j].value === 'X') {\n        continue;\n      }\n\n      // Top\n      if (i > 0 && board[i - 1][j].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Top Right\n      if (i > 0 && j < columns - 1 && board[i - 1][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Right\n      if (j < columns - 1 && board[i][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom Right\n      if (i < rows - 1 && j < columns - 1 && board[i + 1][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom\n      if (i < rows - 1 && board[i + 1][j].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom Left\n      if (i < rows - 1 && j > 0 && board[i + 1][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Left\n      if (j > 0 && board[i][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Top Left\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n    }\n  }\n  // Set mine count for cell for all mines around ----->\n\n  return { board, mineLocation };\n}\n","import { CellDetails } from './types';\n\nexport const revealed = (arr: CellDetails[][], x: number, y: number, newNonMines: number) => {\n  // all the cells which are adjacent to zero must be stored in the array\n  // so that it can be revealed later\n\n  let cellsFreeFromMines = [];\n  cellsFreeFromMines.push(arr[x][y]);\n  while (cellsFreeFromMines.length !== 0) {\n    let cell: CellDetails = cellsFreeFromMines.pop() as CellDetails;\n    if (!cell?.revealed) {\n      newNonMines--;\n      cell.revealed = true;\n    }\n    if (cell?.value !== 0) {\n      break;\n    }\n\n    // top left\n    if (\n      cell.x > 0 &&\n      cell.y > 0 &&\n      arr[cell.x - 1][cell.y - 1].value === 0 &&\n      !arr[cell.x - 1][cell.y - 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y - 1]);\n    }\n\n    // bottom right\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x + 1][cell.y + 1].value === 0 &&\n      !arr[cell.x + 1][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y + 1]);\n    }\n\n    // top right\n    if (\n      cell.x > 0 &&\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x - 1][cell.y + 1].value === 0 &&\n      !arr[cell.x - 1][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y + 1]);\n    }\n\n    // bottom left\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y > 0 &&\n      arr[cell.x + 1][cell.y - 1].value === 0 &&\n      !arr[cell.x + 1][cell.y - 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y - 1]);\n    }\n\n    // top\n    if (cell.x > 0 && arr[cell.x - 1][cell.y].value === 0 && !arr[cell.x - 1][cell.y].revealed) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y]);\n    }\n\n    // right\n    if (\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x][cell.y + 1].value === 0 &&\n      !arr[cell.x][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x][cell.y + 1]);\n    }\n\n    // bottom\n    if (\n      cell.x < arr.length - 1 &&\n      arr[cell.x + 1][cell.y].value === 0 &&\n      !arr[cell.x + 1][cell.y].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y]);\n    }\n\n    // left\n    if (cell.y > 0 && arr[cell.x][cell.y - 1].value === 0 && !arr[cell.x][cell.y - 1].revealed) {\n      cellsFreeFromMines.push(arr[cell.x][cell.y - 1]);\n    }\n\n    // start revealing the item\n    if (cell.x > 0 && cell.y > 0 && !arr[cell.x - 1][cell.y - 1].revealed) {\n      // Top Left Reveal\n      arr[cell.x - 1][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.y > 0 && !arr[cell.x][cell.y - 1].revealed) {\n      // Left Reveal\n      arr[cell.x][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x < arr.length - 1 && cell.y > 0 && !arr[cell.x + 1][cell.y - 1].revealed) {\n      // Bottom Left Reveal\n      arr[cell.x + 1][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x > 0 && !arr[cell.x - 1][cell.y].revealed) {\n      // Top Reveal\n      arr[cell.x - 1][cell.y].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x < arr.length - 1 && !arr[cell.x + 1][cell.y].revealed) {\n      // Bottom Reveal\n      arr[cell.x + 1][cell.y].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x > 0 && cell.y < arr[0].length - 1 && !arr[cell.x - 1][cell.y + 1].revealed) {\n      // Top Right Reveal\n      arr[cell.x - 1][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.y < arr[0].length - 1 && !arr[cell.x][cell.y + 1].revealed) {\n      // Right Reveal\n      arr[cell.x][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y < arr[0].length - 1 &&\n      !arr[cell.x + 1][cell.y + 1].revealed\n    ) {\n      // Bottom Right Reveal\n      arr[cell.x + 1][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n  }\n\n  return { arr, newNonMines };\n};\n","export interface CellDetails {\n  revealed: boolean;\n  value: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 'X';\n  x: number;\n  y: number;\n}\n\nexport enum Dimensions {\n  cols = 'cols',\n  rows = 'rows',\n  mines = 'mines',\n}\n"],"names":["boardSIzeState","atom","key","default","rows","cols","mines","useBoardSizeState","useRecoilState","CellNode","styled","revealed","value","Cell","details","revealCell","onClick","x","y","ContainerStyled","Container","Row","Aligned","ButtonStyled","Button","SubHeading","useState","board","setBoard","explode","setExplode","nonMineCount","setNonMineCount","mineLocation","setMineLocation","boardSize","restartBoard","useCallback","newBoard","createBoard","useEffect","navigate","useNavigate","i","length","revealedBoard","arr","newNonMines","headingString","map","singleRow","index1","singleCol","index2","pageUrl","random","min","max","Math","floor","columns","column","push","minesCount","j","Dimensions","cellsFreeFromMines","cell","pop"],"sourceRoot":""}