{"version":3,"file":"static/js/707.b6a3fd37.chunk.js","mappings":"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","sources":["hooks/states/useBoardSizeState/useBoardSizeState.ts","hooks/states/atomKeys.ts","pages/SetupBoard/SetupBoard.tsx","utils/boardUtils/createBoard.ts","utils/boardUtils/reveal.ts","utils/boardUtils/types.ts"],"sourcesContent":["import { atom, useRecoilState } from 'recoil';\nimport { atomKeys } from '../atomKeys';\n\nexport const boardSIzeState = atom({\n  key: atomKeys.boardSize,\n  default: {\n    rows: 10,\n    cols: 10,\n    mines: 5,\n  },\n});\n\nexport const useBoardSizeState = () => useRecoilState(boardSIzeState);\n","export const atomKeys = {\n  boardSize: 'boardSize',\n};\n","import { ChangeEvent } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Container, Heading } from 'src/components';\nimport { pageUrl } from 'src/const';\nimport { useBoardSizeState } from 'src/hooks';\nimport { Dimensions } from 'src/utils';\nimport styled from 'styled-components';\n\nconst ContainerStyled = styled(Container)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ButtonStyled = styled(Button)`\n  margin-top: 30px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nconst Input = styled.input`\n  background-color: #f7cf06;\n  height: 30px;\n  color: #0254b1;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nconst Label = styled.label`\n  color: #f7cf06;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst LabelText = styled.span`\n  display: inline-block;\n  padding: 0 10px 0 0;\n  margin: 20px 0;\n  min-width: 170px;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const SetupBoard = () => {\n  const [boardSize, setBoardSize] = useBoardSizeState();\n  const navigate = useNavigate();\n\n  const updateBoardDimensions = (dimension: Dimensions) => (e: ChangeEvent<HTMLInputElement>) => {\n    const numberValue = +e.target.value;\n    if (dimension !== Dimensions.mines) {\n      if (5 <= numberValue && numberValue <= 15) {\n        setBoardSize((oldState) => ({ ...oldState, [dimension]: numberValue }));\n      }\n    } else {\n      if (3 <= numberValue && numberValue <= 10) {\n        setBoardSize((oldState) => ({ ...oldState, [dimension]: numberValue }));\n      }\n    }\n  };\n\n  const onStartClick = () => navigate(pageUrl.session);\n\n  return (\n    <ContainerStyled>\n      <Wrapper>\n        <InputWrapper>\n          <Heading>Board Settings</Heading>\n          <Label>\n            <LabelText>Columns (5-15)</LabelText>\n            <Input\n              onChange={updateBoardDimensions(Dimensions.cols)}\n              type=\"number\"\n              value={boardSize.cols}\n            />\n          </Label>\n          <Label>\n            <LabelText>Rows (5 - 15)</LabelText>\n            <Input\n              onChange={updateBoardDimensions(Dimensions.rows)}\n              type=\"number\"\n              value={boardSize.rows}\n            />\n          </Label>\n          <Label>\n            <LabelText>Mines (3-10)</LabelText>\n            <Input\n              onChange={updateBoardDimensions(Dimensions.mines)}\n              type=\"number\"\n              value={boardSize.mines}\n            />\n          </Label>\n          <ButtonStyled onClick={onStartClick}>Start</ButtonStyled>\n        </InputWrapper>\n      </Wrapper>\n    </ContainerStyled>\n  );\n};\n\nexport default SetupBoard;\n","import { CellDetails } from './types';\n\ntype MineLocation = [x: number, y: number][];\n\nfunction random(min = 0, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function createBoard(rows: number, columns: number, mines: number) {\n  let board: CellDetails[][] = [];\n\n  let mineLocation: MineLocation = [];\n\n  // Create empty board with all cells ------ >\n  for (let x = 0; x < rows; x++) {\n    let column: CellDetails[] = [];\n    for (let y = 0; y < columns; y++) {\n      column.push({\n        value: 0,\n        revealed: false,\n        x: x,\n        y: y,\n      });\n    }\n    board.push(column);\n  }\n  // Create empty board with all cells ------ >\n\n  // Randomize Bomb Placement ------>\n  let minesCount = 0;\n  while (minesCount < mines) {\n    let x = random(0, rows - 1);\n    let y = random(0, columns - 1);\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = 'X';\n      mineLocation.push([x, y]);\n      minesCount++;\n    }\n  }\n  // Randomize Bomb Placement ------>\n\n  // Set mine count for cell for all mines around ----->\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (board[i][j].value === 'X') {\n        continue;\n      }\n\n      // Top\n      if (i > 0 && board[i - 1][j].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Top Right\n      if (i > 0 && j < columns - 1 && board[i - 1][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Right\n      if (j < columns - 1 && board[i][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom Right\n      if (i < rows - 1 && j < columns - 1 && board[i + 1][j + 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom\n      if (i < rows - 1 && board[i + 1][j].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Bottom Left\n      if (i < rows - 1 && j > 0 && board[i + 1][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Left\n      if (j > 0 && board[i][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n\n      // Top Left\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === 'X') {\n        (board[i][j].value as number)++;\n      }\n    }\n  }\n  // Set mine count for cell for all mines around ----->\n\n  return { board, mineLocation };\n}\n","import { CellDetails } from './types';\n\nexport const revealed = (arr: CellDetails[][], x: number, y: number, newNonMines: number) => {\n  // all the cells which are adjacent to zero must be stored in the array\n  // so that it can be revealed later\n\n  let cellsFreeFromMines = [];\n  cellsFreeFromMines.push(arr[x][y]);\n  while (cellsFreeFromMines.length !== 0) {\n    let cell: CellDetails = cellsFreeFromMines.pop() as CellDetails;\n    if (!cell?.revealed) {\n      newNonMines--;\n      cell.revealed = true;\n    }\n    if (cell?.value !== 0) {\n      break;\n    }\n\n    // top left\n    if (\n      cell.x > 0 &&\n      cell.y > 0 &&\n      arr[cell.x - 1][cell.y - 1].value === 0 &&\n      !arr[cell.x - 1][cell.y - 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y - 1]);\n    }\n\n    // bottom right\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x + 1][cell.y + 1].value === 0 &&\n      !arr[cell.x + 1][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y + 1]);\n    }\n\n    // top right\n    if (\n      cell.x > 0 &&\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x - 1][cell.y + 1].value === 0 &&\n      !arr[cell.x - 1][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y + 1]);\n    }\n\n    // bottom left\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y > 0 &&\n      arr[cell.x + 1][cell.y - 1].value === 0 &&\n      !arr[cell.x + 1][cell.y - 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y - 1]);\n    }\n\n    // top\n    if (cell.x > 0 && arr[cell.x - 1][cell.y].value === 0 && !arr[cell.x - 1][cell.y].revealed) {\n      cellsFreeFromMines.push(arr[cell.x - 1][cell.y]);\n    }\n\n    // right\n    if (\n      cell.y < arr[0].length - 1 &&\n      arr[cell.x][cell.y + 1].value === 0 &&\n      !arr[cell.x][cell.y + 1].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x][cell.y + 1]);\n    }\n\n    // bottom\n    if (\n      cell.x < arr.length - 1 &&\n      arr[cell.x + 1][cell.y].value === 0 &&\n      !arr[cell.x + 1][cell.y].revealed\n    ) {\n      cellsFreeFromMines.push(arr[cell.x + 1][cell.y]);\n    }\n\n    // left\n    if (cell.y > 0 && arr[cell.x][cell.y - 1].value === 0 && !arr[cell.x][cell.y - 1].revealed) {\n      cellsFreeFromMines.push(arr[cell.x][cell.y - 1]);\n    }\n\n    // start revealing the item\n    if (cell.x > 0 && cell.y > 0 && !arr[cell.x - 1][cell.y - 1].revealed) {\n      // Top Left Reveal\n      arr[cell.x - 1][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.y > 0 && !arr[cell.x][cell.y - 1].revealed) {\n      // Left Reveal\n      arr[cell.x][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x < arr.length - 1 && cell.y > 0 && !arr[cell.x + 1][cell.y - 1].revealed) {\n      // Bottom Left Reveal\n      arr[cell.x + 1][cell.y - 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x > 0 && !arr[cell.x - 1][cell.y].revealed) {\n      // Top Reveal\n      arr[cell.x - 1][cell.y].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x < arr.length - 1 && !arr[cell.x + 1][cell.y].revealed) {\n      // Bottom Reveal\n      arr[cell.x + 1][cell.y].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.x > 0 && cell.y < arr[0].length - 1 && !arr[cell.x - 1][cell.y + 1].revealed) {\n      // Top Right Reveal\n      arr[cell.x - 1][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (cell.y < arr[0].length - 1 && !arr[cell.x][cell.y + 1].revealed) {\n      // Right Reveal\n      arr[cell.x][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n\n    if (\n      cell.x < arr.length - 1 &&\n      cell.y < arr[0].length - 1 &&\n      !arr[cell.x + 1][cell.y + 1].revealed\n    ) {\n      // Bottom Right Reveal\n      arr[cell.x + 1][cell.y + 1].revealed = true;\n      newNonMines--;\n    }\n  }\n\n  return { arr, newNonMines };\n};\n","export interface CellDetails {\n  revealed: boolean;\n  value: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 'X';\n  x: number;\n  y: number;\n}\n\nexport enum Dimensions {\n  cols = 'cols',\n  rows = 'rows',\n  mines = 'mines',\n}\n"],"names":["boardSIzeState","atom","key","default","rows","cols","mines","useBoardSizeState","useRecoilState","ContainerStyled","styled","Container","ButtonStyled","Button","Wrapper","Input","Label","LabelText","InputWrapper","SetupBoard","boardSize","setBoardSize","navigate","useNavigate","updateBoardDimensions","dimension","e","numberValue","target","value","Dimensions","oldState","onChange","type","onClick","pageUrl","random","min","max","Math","floor","createBoard","columns","board","mineLocation","x","column","y","push","revealed","minesCount","i","j","arr","newNonMines","cellsFreeFromMines","length","cell","pop"],"sourceRoot":""}